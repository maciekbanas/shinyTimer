[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 shinyTimer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maciej Banas. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Banas M (2025). shinyTimer: Customizable Timer 'shiny' Applications. R package version 0.1.0.9001.","code":"@Manual{,   title = {shinyTimer: Customizable Timer for 'shiny' Applications},   author = {Maciej Banas},   year = {2025},   note = {R package version 0.1.0.9001}, }"},{"path":"/index.html","id":"shinytimer-","dir":"","previous_headings":"","what":"Customizable Timer for shiny Applications","title":"Customizable Timer for shiny Applications","text":"shinyTimer allows easily integrate countdown timer Shiny UI, providing real-time updates server notification timer completes. examples make use shinyMobile framework.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Customizable Timer for shiny Applications","text":"CRAN version: Development version:","code":"install.packages(\"shinyTimer\") # install.packages(\"remotes\") remotes::install_github(\"maciekbanas/shinyTimer\")"},{"path":"/index.html","id":"how-it-works","dir":"","previous_headings":"","what":"How it works","title":"Customizable Timer for shiny Applications","text":"get things work need add UI shinyTimer() trigger action server (e.g. countDown()). Try : shinyTimer() default simple one, can switch clock types passing mm:ss, hh:mm:ss mm:ss.cs (centiseconds) type parameter.  can either set seconds, minutes hours.","code":"ui <- shinyMobile::f7Page(   shinyMobile::f7Card(     shinyTimer::shinyTimer(       inputId = \"shiny_timer\",       seconds = 10L,        type = \"simple\",        style = \"font-weight: bold; font-size: 72px; text-align:center\"     )   ) )  server <- function(input, output, session) {   shiny::observe({     shinyTimer::countDown(       inputId = \"shiny_timer\"     )   }) }  shinyApp(ui, server)"},{"path":"/index.html","id":"when-timer-completes","dir":"","previous_headings":"","what":"When timer completes","title":"Customizable Timer for shiny Applications","text":"timer reaches 0 JavaScript sends timer_done value Shiny input. can use trigger action (see example ).","code":"ui <- shinyMobile::f7Page(   shinyMobile::f7Card(     shinyTimer::shinyTimer(       inputId = \"shiny_timer\",       seconds = 10L,        type = \"simple\",        style = \"font-weight: bold; font-size: 72px; text-align:center\"     ),     shinyMobile::f7Button(       \"start_timer\",       label = \"Start\",        size = \"large\",       rounded = TRUE,       color = \"orange\"     ) |>       htmltools::tagAppendAttributes(         style = \"font-size:20px;\"       )   ) )  server <- function(input, output, session) {   shiny::observeEvent(input$start_timer, {     shinyTimer::countDown(\"shiny_timer\")   })   shiny::observeEvent(input$timer_done, {     shinyMobile::f7Dialog(       id = \"dialog\",       title = \"Time's Up!\",       text = \"\"     )   }) }  shinyApp(ui, server)"},{"path":"/index.html","id":"stopwatch","dir":"","previous_headings":"","what":"Stopwatch","title":"Customizable Timer for shiny Applications","text":"can also use shinyTimer stopwatch. Simply trigger shinyTimer server countUp(). can also pauseTimer() resetTimer().","code":"ui <- shinyMobile::f7Page(   shinyMobile::f7Card(     shinyTimer::shinyTimer(       inputId = \"shiny_timer\",       seconds = 0L,        type = \"mm:ss.cs\",        style = \"font-weight: bold; font-size: 72px; text-align:center\"     ),     shiny::br(),     shinyMobile::f7Block(       shinyMobile::f7Button(         \"start_timer\",         label = \"Run\",          size = \"large\",         rounded = TRUE,         color = \"green\"       ) |>         htmltools::tagAppendAttributes(           style = \"font-size:20px;\"         ),       shinyMobile::f7Button(         \"pause_timer\",         label = \"Pause\",          size = \"large\",         rounded = TRUE,         color = \"orange\"       ) |>         htmltools::tagAppendAttributes(           style = \"font-size:20px;\"         ),       shinyMobile::f7Button(         \"resume_timer\",         label = \"Reset\",          size = \"large\",         rounded = TRUE,         color = \"blue\"       ) |>         htmltools::tagAppendAttributes(           style = \"font-size:20px;\"         )     )   ) )  server <- function(input, output, session) {   shiny::observeEvent(input$start_timer, {     shinyTimer::countUp(\"shiny_timer\")   })   shiny::observeEvent(input$pause_timer, {     shinyTimer::pauseTimer(\"shiny_timer\")   })   shiny::observeEvent(input$resume_timer, {     shinyTimer::resetTimer(\"shiny_timer\")   }) }  shinyApp(ui, server)"},{"path":"/reference/countDown.html","id":null,"dir":"Reference","previous_headings":"","what":"Set shinyTimer in motion: count down — countDown","title":"Set shinyTimer in motion: count down — countDown","text":"Set shinyTimer motion: count ","code":""},{"path":"/reference/countDown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set shinyTimer in motion: count down — countDown","text":"","code":"countDown(inputId, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/countDown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set shinyTimer in motion: count down — countDown","text":"inputId input ID corresponding UI element. session session object shiny server function.","code":""},{"path":"/reference/countDown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set shinyTimer in motion: count down — countDown","text":"return value, called side effects.","code":""},{"path":"/reference/countDown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set shinyTimer in motion: count down — countDown","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Countdown Timer\", seconds = 20, type = \"mm:ss\"),       actionButton(\"start\", \"Start Countdown\")     ),     server = function(input, output, session) {       observeEvent(input$start, {         countDown(\"timer\")       })     }   ) }"},{"path":"/reference/countUp.html","id":null,"dir":"Reference","previous_headings":"","what":"Set shinyTimer in motion: count up — countUp","title":"Set shinyTimer in motion: count up — countUp","text":"Set shinyTimer motion: count ","code":""},{"path":"/reference/countUp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set shinyTimer in motion: count up — countUp","text":"","code":"countUp(inputId, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/countUp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set shinyTimer in motion: count up — countUp","text":"inputId input ID corresponding UI element. session session object shiny server function.","code":""},{"path":"/reference/countUp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set shinyTimer in motion: count up — countUp","text":"return value, called side effects.","code":""},{"path":"/reference/countUp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set shinyTimer in motion: count up — countUp","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Count Up Timer\", seconds = 0, type = \"mm:ss.cs\"),       actionButton(\"start\", \"Start Counting Up\")     ),     server = function(input, output, session) {       observeEvent(input$start, {         countUp(\"timer\")       })     }   ) }"},{"path":"/reference/pauseTimer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pause shinyTimer — pauseTimer","title":"Pause shinyTimer — pauseTimer","text":"Pause shinyTimer","code":""},{"path":"/reference/pauseTimer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pause shinyTimer — pauseTimer","text":"","code":"pauseTimer(inputId, session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/pauseTimer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pause shinyTimer — pauseTimer","text":"inputId input ID corresponding UI element. session session object shiny server function.","code":""},{"path":"/reference/pauseTimer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pause shinyTimer — pauseTimer","text":"return value, called side effects.","code":""},{"path":"/reference/pauseTimer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pause shinyTimer — pauseTimer","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Countdown Timer\", seconds = 20, type = \"mm:ss\"),       actionButton(\"start\", \"Start Countdown\"),       actionButton(\"pause\", \"Pause Countdown\")     ),     server = function(input, output, session) {       observeEvent(input$start, {         countDown(\"timer\")       })       observeEvent(input$pause, {         pauseTimer(\"timer\")       })     }   ) }"},{"path":"/reference/resetTimer.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset shinyTimer — resetTimer","title":"Reset shinyTimer — resetTimer","text":"Reset shinyTimer","code":""},{"path":"/reference/resetTimer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset shinyTimer — resetTimer","text":"","code":"resetTimer(   inputId,   hours = 0,   minutes = 0,   seconds = 0,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/resetTimer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset shinyTimer — resetTimer","text":"inputId input ID corresponding UI element. hours new reset time hours. minutes new reset time minutes. seconds new reset time seconds. session session object shiny server function.","code":""},{"path":"/reference/resetTimer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset shinyTimer — resetTimer","text":"return value, called side effects.","code":""},{"path":"/reference/resetTimer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset shinyTimer — resetTimer","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Countdown Timer\", seconds = 20, type = \"mm:ss\"),       actionButton(\"reset\", \"Reset Timer\")     ),     server = function(input, output, session) {       observeEvent(input$reset, {         resetTimer(\"timer\", seconds = 20)       })     }   ) }"},{"path":"/reference/shinyTimer.html","id":null,"dir":"Reference","previous_headings":"","what":"shinyTimer widget — shinyTimer","title":"shinyTimer widget — shinyTimer","text":"shinyTimer widget","code":""},{"path":"/reference/shinyTimer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shinyTimer widget — shinyTimer","text":"","code":"shinyTimer(   inputId,   label = NULL,   hours = 0,   minutes = 0,   seconds = 0,   type = \"simple\",   frame = \"circle\",   ... )"},{"path":"/reference/shinyTimer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shinyTimer widget — shinyTimer","text":"inputId input id. label label display countdown. hours integer, starting time hours countdown. minutes integer, starting time minutes countdown. seconds integer, starting time seconds countdown. type type countdown timer display (\"simple\", \"mm:ss\", \"hh:mm:ss\", \"mm:ss.cs\"). frame shape timer's container (\"none\", \"circle\", \"rectangle\"). ... additional parameters want pass placeholder timer (htmltools::tags$div).","code":""},{"path":"/reference/shinyTimer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shinyTimer widget — shinyTimer","text":"shiny UI component countdown timer.","code":""},{"path":"/reference/shinyTimer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"shinyTimer widget — shinyTimer","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Countdown Timer\", seconds = 10)     ),     server = function(input, output, session) {       observeEvent(input$start, {         countDown(\"timer\", session)       })     }   ) }"},{"path":"/reference/updateShinyTimer.html","id":null,"dir":"Reference","previous_headings":"","what":"Update shinyTimer widget — updateShinyTimer","title":"Update shinyTimer widget — updateShinyTimer","text":"Update shinyTimer widget","code":""},{"path":"/reference/updateShinyTimer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update shinyTimer widget — updateShinyTimer","text":"","code":"updateShinyTimer(   inputId,   hours = NULL,   minutes = NULL,   seconds = NULL,   type = NULL,   label = NULL,   frame = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"/reference/updateShinyTimer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update shinyTimer widget — updateShinyTimer","text":"inputId input ID corresponding UI element. hours new starting time hours countdown. minutes new starting time minutes countdown. seconds new starting time seconds countdown. type new type countdown timer display (\"simple\", \"mm:ss\", \"hh:mm:ss\", \"mm:ss.cs\"). label new label displayed countdown timer. frame new shape timer's container (\"none\", \"circle\", \"rectangle\"). session session object shiny server function.","code":""},{"path":"/reference/updateShinyTimer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update shinyTimer widget — updateShinyTimer","text":"return value, called side effects.","code":""},{"path":"/reference/updateShinyTimer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update shinyTimer widget — updateShinyTimer","text":"","code":"if (interactive()) {   library(shiny)   shinyApp(     ui = fluidPage(       shinyTimer(\"timer\", label = \"Countdown Timer\", seconds = 10, type = \"mm:ss\"),       actionButton(\"update\", \"Update Timer\")     ),     server = function(input, output, session) {       observeEvent(input$update, {         updateShinyTimer(\"timer\", seconds = 20, type = \"hh:mm:ss\")       })     }   ) }"},{"path":"/news/index.html","id":"shinytimer-development-version","dir":"Changelog","previous_headings":"","what":"shinyTimer (development version)","title":"shinyTimer (development version)","text":"Renamed background parameter frame better reflect purpose. Added fill parameter pass colors background shinyTimer (#60).","code":""},{"path":"/news/index.html","id":"shinytimer-010","dir":"Changelog","previous_headings":"","what":"shinyTimer 0.1.0","title":"shinyTimer 0.1.0","text":"CRAN release: 2025-03-07 first release presenting timer widget Shiny applications following features: Basic UI server functions: shinyTimer(), updateShinyTimer(), countDown() countUp() functions (#1, #11, #28). Possibility set different units hours, minutes seconds parameters different formats timer type parameter (#9, #13, #30, #31). Possibility pauseTimer() (#23) resetTimer() (#10). Option add background shinyTimer() (#47).","code":""}]
